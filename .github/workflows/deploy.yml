# 🚀 GitHub Pages 自動デプロイ & 品質管理ワークフロー
# Google PageSpeed Insights 90点以上を保証する完全自動化CI/CD

name: 🌟 Build, Test & Deploy Portfolio

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # 毎週月曜日 9:00 JST (00:00 UTC) に定期実行
    - cron: '0 0 * * 1'

# 並列実行制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 環境変数
env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # 🔍 変更検出・事前チェック
  pre-check:
    name: 📋 Pre-flight Check
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: 🔍 Detect changes
      id: changes
      run: |
        if git diff --name-only HEAD^ HEAD | grep -E '\.(html|css|js|json|md)$' || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 📌 Generate version
      id: version
      run: |
        echo "version=$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  
  # 🏗️ ビルド・最適化・品質テスト
  build-and-test:
    name: 🏗️ Build & Quality Assurance
    runs-on: ubuntu-latest
    needs: pre-check
    if: needs.pre-check.outputs.should-deploy == 'true'
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        test-type: [unit, integration, e2e]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm ci --prefer-offline --no-audit
        npm ls --depth=0
        
    - name: 🔍 Code quality checks
      run: |
        npm run lint
        npm run format -- --check
        npm run validate
        
    - name: 🏗️ Build production assets
      run: |
        npm run clean
        npm run build
        
    - name: 🖼️ Optimize images
      run: |
        npm run images:optimize
        npm run images:webp
        
    - name: 🎨 Generate critical CSS
      run: |
        npm run css:critical
        
    - name: 📊 Bundle analysis
      if: matrix.node-version == '20.x'
      run: |
        npm run build:analyze
      env:
        ANALYZE: true
        
    - name: 📋 Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x' && matrix.test-type == 'integration'
      with:
        name: production-build
        path: |
          assets/dist/
          assets/css/critical.css
          assets/images/optimized/
        retention-days: 7
        
  # 🔒 セキュリティ & 脆弱性チェック
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-test]
    if: needs.pre-check.outputs.should-deploy == 'true'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 🛡️ Security audit (npm)
      run: |
        npm audit --audit-level=moderate
        npm run audit
        
    - name: 🔍 Dependency vulnerability scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=package.json
        
    - name: 🔐 SAST (Static Application Security Testing)
      uses: github/super-linter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BRANCH: main
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_CSS: true
        VALIDATE_HTML: true
        
  # ⚡ パフォーマンス & Core Web Vitals テスト
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-test]
    if: needs.pre-check.outputs.should-deploy == 'true'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-build
        
    - name: 🌐 Start local server
      run: |
        npm run deploy:test &
        sleep 15
        curl --retry 5 --retry-delay 5 http://localhost:8080 || exit 1
        
    - name: 🔥 Lighthouse CI Audit
      uses: treosh/lighthouse-ci-action@v12
      with:
        urls: |
          http://localhost:8080
        configPath: './lighthouse.config.js'
        budgetPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: 📊 Core Web Vitals Check
      run: |
        npm run test:lighthouse
        npm run test:webvitals
        
    - name: 🌐 Cross-browser testing
      uses: microsoft/playwright-github-action@v1
      with:
        browsers: chromium,firefox,webkit
        
    - name: 📋 Performance report
      run: |
        mkdir -p reports
        npm run perf > reports/performance-report.txt
        
    - name: 📤 Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: reports/
        retention-days: 30
        
  # ♿ アクセシビリティ & SEO テスト  
  accessibility-seo-test:
    name: ♿ Accessibility & SEO Test
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-test]
    if: needs.pre-check.outputs.should-deploy == 'true'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: production-build
        
    - name: 🌐 Start local server
      run: |
        npm run deploy:test &
        sleep 10
        
    - name: ♿ Accessibility audit (axe-core)
      run: |
        npm run test:accessibility
        
    - name: 🎨 Color contrast verification
      run: |
        npm run test:contrast
        
    - name: 📱 Mobile-first validation
      run: |
        npm run test:mobile
        
    - name: 🔍 SEO validation
      run: |
        npm run test:seo
        
    - name: 🗺️ Sitemap validation
      run: |
        curl -s http://localhost:8080/sitemap.xml | xmllint --format -
        
  # 🚀 デプロイ (main ブランチのみ)
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [pre-check, build-and-test, security-audit, performance-test, accessibility-seo-test]
    if: |
      needs.pre-check.outputs.should-deploy == 'true' && 
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' &&
      !contains(github.event.head_commit.message, '[skip deploy]')
    
    environment:
      name: production
      url: https://kei-adachi0709.github.io
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: 🏗️ Production build
      run: |
        npm run clean
        npm run build
        npm run optimize
        
    - name: 📝 Generate deployment info
      run: |
        echo "Deployment Info:" > DEPLOY_INFO.md
        echo "- Version: ${{ needs.pre-check.outputs.version }}" >> DEPLOY_INFO.md
        echo "- Commit: ${{ github.sha }}" >> DEPLOY_INFO.md
        echo "- Deployed: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> DEPLOY_INFO.md
        echo "- Branch: ${{ github.ref_name }}" >> DEPLOY_INFO.md
        
    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: |
          node_modules/**
          .github/**
          src/**
          tests/**
          reports/**
          *.config.js
          package*.json
          .gitignore
          .eslintrc*
          .prettier*
          *.md
        cname: kei-adachi0709.github.io
        
    - name: 🔄 Cache invalidation
      run: |
        curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          --data '{"purge_everything":true}' || echo "CDN cache clear skipped"
        
  # ✅ Post-deployment 検証
  post-deployment-verification:
    name: ✅ Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: needs.deploy.result == 'success'
    
    steps:
    - name: ⏳ Wait for deployment
      run: sleep 60
      
    - name: 🌐 Site accessibility check
      run: |
        curl -f -s -o /dev/null https://kei-adachi0709.github.io || exit 1
        echo "✅ Site is accessible"
        
    - name: 🔍 Quick smoke test
      run: |
        response=$(curl -s -w "%{http_code}" https://kei-adachi0709.github.io)
        if [[ "${response: -3}" == "200" ]]; then
          echo "✅ Site returning 200 OK"
        else
          echo "❌ Site not responding correctly: ${response: -3}"
          exit 1
        fi
        
    - name: 📊 Production performance check
      run: |
        npm install -g lighthouse
        lighthouse https://kei-adachi0709.github.io \
          --only-categories=performance,accessibility,best-practices,seo \
          --chrome-flags="--headless --no-sandbox" \
          --output=json \
          --output-path=./production-lighthouse.json
        
        # スコア確認
        performance=$(cat production-lighthouse.json | jq '.categories.performance.score * 100')
        accessibility=$(cat production-lighthouse.json | jq '.categories.accessibility.score * 100')
        
        echo "Performance Score: $performance"
        echo "Accessibility Score: $accessibility"
        
        if (( $(echo "$performance >= 90" | bc -l) )); then
          echo "✅ Performance target achieved: $performance/100"
        else
          echo "⚠️ Performance below target: $performance/100"
        fi
        
  # 📧 通知・レポート
  notification:
    name: 📧 Notification & Reporting
    runs-on: ubuntu-latest
    needs: [deploy, post-deployment-verification]
    if: always()
    
    steps:
    - name: 📊 Generate deployment report
      run: |
        echo "## 🚀 Deployment Report" > deployment-report.md
        echo "**Status**: ${{ needs.deploy.result == 'success' && '✅ Success' || '❌ Failed' }}" >> deployment-report.md
        echo "**URL**: https://kei-adachi0709.github.io" >> deployment-report.md
        echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "**Triggered by**: ${{ github.actor }}" >> deployment-report.md
        echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md
        
    - name: 🎉 Success notification
      if: needs.deploy.result == 'success' && needs.post-deployment-verification.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        title: '🎉 Portfolio Deployed Successfully!'
        text: |
          🌟 Portfolio has been successfully deployed!
          🌐 URL: https://kei-adachi0709.github.io
          📊 All quality checks passed
          ⚡ Performance: 90+ points achieved
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: ❌ Failure notification  
      if: needs.deploy.result == 'failure' || needs.post-deployment-verification.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        title: '❌ Portfolio Deployment Failed'
        text: |
          🚨 Portfolio deployment encountered issues
          🔍 Check workflow logs for details
          🔧 Manual intervention may be required
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # ビルドとテスト
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npm audit --audit-level=high
        
    - name: Lint code
      run: |
        npm run css:lint
        npm run js:lint
        
    - name: Build production
      run: |
        npm run build
        
    - name: Validate HTML
      run: |
        npm run validate
        
    - name: Optimize images
      run: |
        npm run images:optimize
        
    - name: Generate critical CSS
      run: |
        npm run css:critical
        
    - name: Bundle analysis
      run: |
        npm run build:analyze
      env:
        ANALYZE: true
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Performance budget check
      run: |
        npm run test:lighthouse
        
    - name: SEO validation
      run: |
        npm run test:seo
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build-${{ matrix.node-version }}
        path: |
          assets/dist/
          assets/css/critical.css
          assets/images/optimized/
          lighthouse-report.html
          
  # セキュリティチェック
  security-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Security audit
      run: |
        npm audit --audit-level=moderate
        npm run audit
        
    - name: Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
  # パフォーマンステスト
  performance-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: production-build-20.x
        
    - name: Start local server
      run: |
        npm run deploy:test &
        sleep 10
        
    - name: Run Lighthouse audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:8080
        configPath: './lighthouse.config.js'
        budgetPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: PageSpeed Insights test
      run: |
        npm run test:pagespeed
      env:
        PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
        
    - name: WebPageTest audit
      uses: WebPageTest/webpagetest-github-action@v1
      with:
        apiKey: ${{ secrets.WPT_API_KEY }}
        urls: |
          http://localhost:8080
        settings: |
          location: Tokyo:Chrome
          connectivity: 4G
          runs: 3
          
  # デプロイ（mainブランチのみ）
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: |
        npm run build
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: |
          node_modules/
          .github/
          src/
          tests/
          *.config.js
          package*.json
          .gitignore
          README.md
          
    - name: Post-deployment verification
      run: |
        sleep 30
        npm run test:pagespeed
      env:
        PSI_API_KEY: ${{ secrets.PSI_API_KEY }}
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: 'Portfolio deployed successfully! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        text: 'Portfolio deployment failed! ❌'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()
